<style lang="less">
.warmtale-player_container {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;

    .warmtale-player_displayPart {
        display: flex;
        flex-direction: column;
        width: 100%;
        box-sizing: border-box;

        .warmtale-player_progressWrapper {
            position: relative;
            width: 100%;
            .warmtale-player_progressBase {
                width: 100%;
                height: 4rpx;
                background-color: rgba(148,141,141,0.53);
            }

            .warmtale-player_progress {
                position: absolute;
                top: 0;
                left: 0;
                background-color: #18A151;
                height: 4rpx;
                width: 50%;
            }
        }

        .warmtale-player_playDuration {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            color: white;
            font-size: 24rpx;
            padding: 10rpx 0;
        }
    }

    .warmtale-player_controlPart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding:0 100rpx;

        &>image {
            width: 38rpx;
            height: 48rpx;

            &:nth-child(1) {
                transform: rotate(180deg);
            }

            &:nth-child(2) {
                width: 76rpx;
                height: 76rpx;
            }
        }


    }
}
</style>

<template>
<view class="warmtale-player_container">
    <view class="warmtale-player_displayPart">
        <view class="warmtale-player_progressWrapper">
            <!-- <view class="warmtale-player_progressBase"></view> -->
            <!-- <view class="warmtale-player_progress" style="{{ progressStyle }}"></view> -->
            <view>
              <slider value="{{ progressStyle }}" bindchanging="dragingProgress" bindchange="finishDrag"/>
            </view>
        </view>
        <view class="warmtale-player_playDuration">
            <view class="warmtale-player_leftDuration">{{ currentTimeFormat }}</view>
            <view class="warmtale-player_rightDuration">{{ durationFormat }}</view>
        </view>
    </view>
    <view class="warmtale-player_controlPart">
        <image src="../../../resource/img/next.png" bindtap="goBefore"/>
        <image src="{{ playing ? '../../resource/img/pause.png' : '../../resource/img/play.png'}}" bindtap="clickPlayButton"/>
        <image src="../../../resource/img/next.png" bindtap="goNext"/>
    </view>
</view>
</template>

<script>
/**
todo:
1\把progress 部分替换成progressBar组件
2\把player controller 部分替换成PlayerController组件
*/
import wepy from 'wepy'
import moment from 'moment'
import { connect } from 'wepy-redux'
import { setPlayingWork, getAFreeRandomWork } from '@/store/actions/work'

@connect({
  work: state => state.work,
  storySetList: state => state.storySetList
}, {
  setPlayingWork,
  getAFreeRandomWork
})
export default class Player extends wepy.component {
  data = {
    audioUrl: '',
    duration: 1.0,
    currentTime: 0.0,
    playing: false
  }
  _innerObj = {
    temp: 'empty'
  }
  computed = {
    durationFormat: () => {
      return moment(parseFloat((this.duration || 0.0).toFixed(3)) * 1000).format('mm:ss')
    },
    currentTimeFormat: () => {
      return moment(parseFloat((this.currentTime || 0.0).toFixed(3)) * 1000).format('mm:ss')
    },
    progressStyle: () => {
      let percent = (this.currentTime / this.duration) * 100
      return percent
    }
  }

  methods = {
    clickPlayButton () {
      wepy.getBackgroundAudioPlayerState({
        success: (res) => {
          if (res.status === 1) {
            // 播放中
            wepy.pauseBackgroundAudio()
            this.playing = false
          } else if (res.status === 0) {
            // 暂停中
            wepy.playBackgroundAudio()
            this.playing = true
          }
        },
        fail: (res) => {
          if (res.errMsg === 'getBackgroundAudioPlayerState: fail not playing') {
            // 没有播放
            wepy.playBackgroundAudio({
              dataUrl: this.work.url
            })
          }
        }
      })
    },
    goBefore: () => {
      if (this.$parent.$parent.globalData.innerAudioContext) {
        this.$parent.$parent.globalData.innerAudioContext.stop()
        // this.$parent.$parent.globalData.innerAudioContext.destroy()
        this.$parent.$parent.globalData.innerAudioContext = null
        this.playing = false
      }

      if (this.work.playingType === 'random') {
        this.methods.getAFreeRandomWork().then(res => {
          let music = res.payload.data.obj
          wepy.playBackgroundAudio({
            dataUrl: music.url
          })
        })
      } else {
        let sequence = this.work.sequence
        let storyList = this.storySetList[sequence[0]].storyList
        this.methods.setPlayingWork([sequence[0], sequence[1] === 0 ? storyList.length - 1 : sequence[1] - 1])
        .then(res => {
          let music = res.payload
          wepy.playBackgroundAudio({
            dataUrl: music.url
          })
        })
      }
    },
    goNext: () => {
      if (this.$parent.$parent.globalData.innerAudioContext) {
        this.$parent.$parent.globalData.innerAudioContext.stop()
        this.$parent.$parent.globalData.innerAudioContext = null
        this.playing = false
      }
      if (this.work.playingType === 'random') {
        this.methods.getAFreeRandomWork().then(res => {
          let music = res.payload.data.obj
          wepy.playBackgroundAudio({
            dataUrl: music.url
          })
        })
      } else {
        this.methods.setPlayingWork().then(res => {
          let music = res.payload
          wepy.playBackgroundAudio({
            dataUrl: music.url
          })
        })
      }
    },
    dragingProgress: (event) => {
      clearInterval(this._innerObj.temp)
      this._innerObj.temp = 'empty'
    },
    finishDrag: (event) => {
      let position = this.duration * (event.detail.value / 100)
      wepy.seekBackgroundAudio({
        position: Math.floor(position),
        success: (...args) => {
        },
        fail: (...args) => {
          console.log('fail', args)
        },
        complete: (...args) => {
          this.currentTime = Math.floor(position)
          this._innerObj.temp = setInterval(() => {
            wepy.getBackgroundAudioPlayerState({
              success: (res) => {
                if (res.status === 1) {
                  this.currentTime = res.currentPosition
                  this.duration = res.duration
                  this.playing = true
                  this.$apply()
                }
              }
            })
          }, 1000)
          // this.$apply()
        }
      })
    }
  }

  playMusic = (music) => {
  }

  onLoad () {
    if (this._innerObj.temp !== 'empty') {
      clearInterval(this._innerObj.temp)
    }
    this._innerObj.temp = setInterval(() => {
      wepy.getBackgroundAudioPlayerState({
        success: (res) => {
          if (res.status === 1) {
            this.currentTime = res.currentPosition
            this.duration = res.duration
            this.playing = true
          } else {
            this.playing = false
          }
          this.$apply()
        }
      })
    }, 1000)
  }
  onUnload() {
    console.log('onUnload')
  }

  onUnLoad() {
    console.log('onUnLoad')
  }
}
</script>
