<style lang="less">
.warmtale-player_container {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;

    .warmtale-player_displayPart {
        display: flex;
        flex-direction: column;
        width: 100%;
        box-sizing: border-box;

        .warmtale-player_progressWrapper {
            position: relative;
            width: 100%;
            .warmtale-player_progressBase {
                width: 100%;
                height: 4rpx;
                background-color: rgba(148,141,141,0.53);
            }

            .warmtale-player_progress {
                position: absolute;
                top: 0;
                left: 0;
                background-color: #18A151;
                height: 4rpx;
                width: 50%;
            }
        }

        .warmtale-player_playDuration {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            color: white;
            font-size: 24rpx;
            padding: 10rpx 0;
        }
    }

    .warmtale-player_controlPart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding:0 100rpx;

        &>image {
            width: 38rpx;
            height: 48rpx;

            &:nth-child(1) {
                transform: rotate(180deg);
            }

            &:nth-child(2) {
                width: 76rpx;
                height: 76rpx;
            }
        }


    }
}
</style>

<template>
<view class="warmtale-player_container">
    <view class="warmtale-player_displayPart">
        <view class="warmtale-player_progressWrapper">
            <view class="warmtale-player_progressBase"></view>
            <view class="warmtale-player_progress" style="{{ progressStyle }}"></view>
        </view>
        <view class="warmtale-player_playDuration">
            <view class="warmtale-player_leftDuration">{{ currentTimeFormat }}</view>
            <view class="warmtale-player_rightDuration">{{ durationFormat }}</view>
        </view>
    </view>
    <view class="warmtale-player_controlPart">
        <image src="../../../resource/img/next.png" bindtap="goBefore"/>
        <image src="{{ playing ? '../../../resource/img/pause.png' : '../../../resource/img/play.png'}}" bindtap="clickPlayButton"/>
        <image src="../../../resource/img/next.png" bindtap="goNext"/>
    </view>
</view>
</template>

<script>
/**
todo:
1\把progress 部分替换成progressBar组件
2\把player controller 部分替换成PlayerController组件
*/
import wepy from 'wepy'
import moment from 'moment'
import _ from 'lodash'
import { connect } from 'wepy-redux'
import { setPlayingWork, getAFreeRandomWork } from '@/store/actions/work'

@connect({
  work: state => state.work,
  storySetList: state => state.storySetList
}, {
  setPlayingWork,
  getAFreeRandomWork
})
export default class Player extends wepy.component {
  data = {
    audioUrl: '',
    duration: 1.0,
    currentTime: 0.0,
    playing: false
  }
  _innerObj = {}
  computed = {
    durationFormat: () => {
      return moment(parseFloat(this.duration.toFixed(3)) * 1000).format('mm:ss')
    },
    currentTimeFormat: () => {
      return moment(parseFloat(this.currentTime.toFixed(3)) * 1000).format('mm:ss')
    },
    progressStyle: () => {
      let percent = (this.currentTime / this.duration) * 100
      return `width : ${percent}%;`
    }
  }

  methods = {
    clickPlayButton () {
      if (!this._innerObj.innerAudioContext) {
        this._innerObj.innerAudioContext = wepy.createInnerAudioContext()
      }
      this._innerObj.innerAudioContext.onError((...args) => {
        console.log('error', args)
      })
      this._innerObj.innerAudioContext.onPlay((...args) => {
        console.log('success', args)
      })
      this._innerObj.innerAudioContext.onTimeUpdate(() => {
        _.throttle(() => {
          this.currentTime = this._innerObj.innerAudioContext && this._innerObj.innerAudioContext.currentTime
          this.duration = this._innerObj.innerAudioContext && this._innerObj.innerAudioContext.duration
          this.$apply()
        }, 1000)()
      })
      if (this.work.url && this._innerObj.innerAudioContext.src === '' && this.work.url !== this._innerObj.innerAudioContext.src) {
        // 没有设置音频源
        this._innerObj.innerAudioContext.src = this.work.url
        this._innerObj.innerAudioContext.play()
        this.playing = true
      } else {
        // 设置了音频源，
        if (this._innerObj.innerAudioContext.paused) {
          // 暂停状态
          this._innerObj.innerAudioContext.play()
          this.playing = true
        } else {
          // 播放状态
          this._innerObj.innerAudioContext.pause()
          this.playing = false
        }
      }

      // console.log('->;', this.work.url)
      // let audioManager = wepy.getBackgroundAudioManager()
      // audioManager.onTimeUpdate(() => {
      //   _.throttle(() => {
      //     this.currentTime = audioManager.currentTime
      //     this.duration = audioManager.duration
      //     this.$apply()
      //   }, 1000)()
      // })
      // if (typeof audioManager.paused === 'undefined' && this.work.url) {
      //   // 没有设置音频源
      //   wepy.playBackgroundAudio({
      //     dataUrl: this.work.url
      //   })
      // } else {
      //   // 设置了音频源，
      //   if (audioManager.paused) {
      //     audioManager.play()
      //   } else {
      //     audioManager.pause()
      //   }
      // }
    },
    goBefore: () => {
      this._innerObj.innerAudioContext.stop()
      this._innerObj.innerAudioContext.destroy()
      this._innerObj.innerAudioContext = null
      this.playing = false

      if (this.work.playingType === 'random') {
        this.methods.getAFreeRandomWork()
      } else {
        let sequence = this.work.sequence
        let storyList = this.storySetList[sequence[0]].storyList
        this.methods.setPlayingWork([sequence[0], sequence[1] === 0 ? storyList.length - 1 : sequence[1] - 1])
      }
    },
    goNext: () => {
      this._innerObj.innerAudioContext.stop()
      this._innerObj.innerAudioContext.destroy()
      this._innerObj.innerAudioContext = null
      this.playing = false

      if (this.work.playingType === 'random') {
        this.methods.getAFreeRandomWork()
      } else {
        this.methods.setPlayingWork()
      }
    }
  }

  onLoad () {
    this.audioUrl = 'http://www.warmtale.com/source/works/2125/uVTw9VRmLCcz743H.mp3'
  //   // 加载数据，不可在此初始化音频url，会导致直接播放，
  }
}
</script>
